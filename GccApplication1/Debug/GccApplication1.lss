
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  000005e8  0000067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080011c  0080011c  00000738  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001209  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000753  00000000  00000000  00001a8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098d  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  00002b70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000523  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b99  00000000  00000000  0000329b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00003e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 31       	cpi	r26, 0x1C	; 28
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e1       	ldi	r26, 0x1C	; 28
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 31       	cpi	r26, 0x1D	; 29
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 91 02 	call	0x522	; 0x522 <main>
  8a:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <twi_stop>:
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	usart_msg("Receiving MR Data NACK");		//--- Feedback msg to check error
	usart_tx(0x0D);								//--- Next Line
	return TWDR;								//--- Return received data
}
  92:	84 e9       	ldi	r24, 0x94	; 148
  94:	86 bf       	out	0x36, r24	; 54
  96:	08 95       	ret

00000098 <usart_init>:
  98:	10 bc       	out	0x20, r1	; 32
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	89 b9       	out	0x09, r24	; 9
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	08 95       	ret

000000a8 <usart_tx>:
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <usart_tx>
  ac:	8c b9       	out	0x0c, r24	; 12
  ae:	08 95       	ret

000000b0 <usart_msg>:
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
  b6:	03 c0       	rjmp	.+6      	; 0xbe <usart_msg+0xe>
  b8:	21 96       	adiw	r28, 0x01	; 1
  ba:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
  be:	88 81       	ld	r24, Y
  c0:	81 11       	cpse	r24, r1
  c2:	fa cf       	rjmp	.-12     	; 0xb8 <usart_msg+0x8>
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <twi_init>:
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	84 bb       	out	0x14, r24	; 20
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	0e 94 4c 00 	call	0x98	; 0x98 <usart_init>
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_msg>
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
  e2:	86 b7       	in	r24, 0x36	; 54
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	86 bf       	out	0x36, r24	; 54
  e8:	11 b8       	out	0x01, r1	; 1
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	80 b9       	out	0x00, r24	; 0
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	86 bf       	out	0x36, r24	; 54
  f2:	85 e3       	ldi	r24, 0x35	; 53
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <twi_init+0x2a>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <twi_start>:
  fc:	84 ea       	ldi	r24, 0xA4	; 164
  fe:	86 bf       	out	0x36, r24	; 54
 100:	06 b6       	in	r0, 0x36	; 54
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <twi_start+0x4>
 106:	81 b1       	in	r24, 0x01	; 1
 108:	88 7f       	andi	r24, 0xF8	; 248
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	e1 f7       	brne	.-8      	; 0x106 <twi_start+0xa>
 10e:	8c ea       	ldi	r24, 0xAC	; 172
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_msg>
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
 11c:	08 95       	ret

0000011e <twi_write_cmd>:
 11e:	83 b9       	out	0x03, r24	; 3
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	86 bf       	out	0x36, r24	; 54
 124:	06 b6       	in	r0, 0x36	; 54
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <twi_write_cmd+0x6>
 12a:	81 b1       	in	r24, 0x01	; 1
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	88 31       	cpi	r24, 0x18	; 24
 130:	e1 f7       	brne	.-8      	; 0x12a <twi_write_cmd+0xc>
 132:	82 e7       	ldi	r24, 0x72	; 114
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_msg>
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
 140:	08 95       	ret

00000142 <twi_write_dwr>:
 142:	83 b9       	out	0x03, r24	; 3
 144:	84 e8       	ldi	r24, 0x84	; 132
 146:	86 bf       	out	0x36, r24	; 54
 148:	06 b6       	in	r0, 0x36	; 54
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <twi_write_dwr+0x6>
 14e:	81 b1       	in	r24, 0x01	; 1
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	88 32       	cpi	r24, 0x28	; 40
 154:	e1 f7       	brne	.-8      	; 0x14e <twi_write_dwr+0xc>
 156:	8a e8       	ldi	r24, 0x8A	; 138
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_msg>
 15e:	8d e0       	ldi	r24, 0x0D	; 13
 160:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
 164:	08 95       	ret

00000166 <PCF8574_write>:
unsigned char lcd = 0x00;						//--- Declaring a variable as lcd for data operation

/* Function to Write data in PCF8574 */

void PCF8574_write(unsigned char x)
{
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
		twi_start();							//--- Start Condition 
 16a:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_start>
		twi_write_cmd((PCF8574 << 1)| WRITE);	//--- SLA+W is Send 0x40 
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	0e 94 8f 00 	call	0x11e	; 0x11e <twi_write_cmd>
		twi_write_dwr(x);						//--- Data to Slave Device
 174:	8c 2f       	mov	r24, r28
 176:	0e 94 a1 00 	call	0x142	; 0x142 <twi_write_dwr>
		twi_stop();								//--- Stop Condition 
 17a:	0e 94 49 00 	call	0x92	; 0x92 <twi_stop>
}
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <twi_lcd_4bit_send>:

/* Function to Write 4-bit data to LCD */

void twi_lcd_4bit_send(unsigned char x)
{
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
	unsigned char temp = 0x00;					//--- temp variable for data operation
	
	lcd &= 0x0F;								//--- Masking last four bit to prevent the RS, RW, EN, Backlight
 186:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 18a:	8f 70       	andi	r24, 0x0F	; 15
	temp = (x & 0xF0);							//--- Masking higher 4-Bit of Data and send it LCD
 18c:	9c 2f       	mov	r25, r28
 18e:	90 7f       	andi	r25, 0xF0	; 240
	lcd |= temp;								//--- 4-Bit Data and LCD control Pin
 190:	89 2b       	or	r24, r25
	lcd |= (0x04);								//--- Latching Data to LCD EN = 1
 192:	84 60       	ori	r24, 0x04	; 4
 194:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 198:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <twi_lcd_4bit_send+0x1c>
 1a2:	00 00       	nop
	_delay_us(1);								//--- 1us Delay
	lcd &= ~(0x04);								//--- Latching Complete
 1a4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT 
 1ae:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
 1b2:	8a e1       	ldi	r24, 0x1A	; 26
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <twi_lcd_4bit_send+0x32>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <twi_lcd_4bit_send+0x38>
	_delay_us(5);								//--- 5us Delay to Complete Latching
	
	
	temp = ((x & 0x0F)<<4);						//--- Masking Lower 4-Bit of Data and send it LCD
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	c8 9f       	mul	r28, r24
 1be:	90 01       	movw	r18, r0
 1c0:	11 24       	eor	r1, r1
	lcd &= 0x0F;								//--- Masking last four bit to prevent the RS, RW, EN, Backlight					
 1c2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 1c6:	8f 70       	andi	r24, 0x0F	; 15
	lcd |= temp;								//--- 4-Bit Data and LCD control Pin
 1c8:	82 2b       	or	r24, r18
	lcd |= (0x04);								//--- Latching Data to LCD EN = 1
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 1d0:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <twi_lcd_4bit_send+0x54>
 1da:	00 00       	nop
	_delay_us(1);								//--- 1us Delay
	lcd &= ~(0x04);								//--- Latching Complete
 1dc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 1e6:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
 1ea:	8a e1       	ldi	r24, 0x1A	; 26
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <twi_lcd_4bit_send+0x6a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <twi_lcd_4bit_send+0x70>
	_delay_us(5);								//--- 5us Delay to Complete Latching
	
}
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <twi_lcd_cmd>:

/* Function to Write to LCD Command Register */

void twi_lcd_cmd(unsigned char x)
{
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
	lcd = 0x08;									//--- Enable Backlight Pin
 1fa:	88 e0       	ldi	r24, 0x08	; 8
 1fc:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	lcd &= ~(0x01);								//--- Select Command Register By RS = 0
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 200:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD 
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 c1 00 	call	0x182	; 0x182 <twi_lcd_4bit_send>
	
}
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <twi_lcd_dwr>:

/* Function to Write to LCD Command Register */

void twi_lcd_dwr(unsigned char x)
{
 20e:	cf 93       	push	r28
 210:	c8 2f       	mov	r28, r24
	lcd |= 0x09;								//--- Enable Backlight Pin & Select Data Register By RS = 1
 212:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 216:	89 60       	ori	r24, 0x09	; 9
 218:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT	
 21c:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 c1 00 	call	0x182	; 0x182 <twi_lcd_4bit_send>
}
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <twi_lcd_msg>:

/* Function to Send String of Data */

void twi_lcd_msg(char *c)
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
	while (*c != '\0')							//--- Check Pointer for Null
 230:	03 c0       	rjmp	.+6      	; 0x238 <twi_lcd_msg+0xe>
	twi_lcd_dwr(*c++);							//--- Send the String of Data
 232:	21 96       	adiw	r28, 0x01	; 1
 234:	0e 94 07 01 	call	0x20e	; 0x20e <twi_lcd_dwr>

/* Function to Send String of Data */

void twi_lcd_msg(char *c)
{
	while (*c != '\0')							//--- Check Pointer for Null
 238:	88 81       	ld	r24, Y
 23a:	81 11       	cpse	r24, r1
 23c:	fa cf       	rjmp	.-12     	; 0x232 <twi_lcd_msg+0x8>
	twi_lcd_dwr(*c++);							//--- Send the String of Data
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <twi_lcd_clear>:

/* Function to Execute Clear LCD Command */

void twi_lcd_clear()
{
	twi_lcd_cmd(0x01);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
 24a:	08 95       	ret

0000024c <twi_lcd_init>:

/* Function to Initialize LCD in 4-Bit Mode, Cursor Setting and Row Selection */

void twi_lcd_init()
{	
	lcd = 0x04;						//--- EN = 1 for 25us initialize Sequence
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
	PCF8574_write(lcd);
 252:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
 256:	25 e8       	ldi	r18, 0x85	; 133
 258:	2a 95       	dec	r18
 25a:	f1 f7       	brne	.-4      	; 0x258 <twi_lcd_init+0xc>
 25c:	00 00       	nop
	_delay_us(25);
	
	twi_lcd_cmd(0x03);				//--- Initialize Sequence
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x03);				//--- Initialize Sequence
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x03);				//--- Initialize Sequence
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x02);				//--- Return to Home
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x28);				//--- 4-Bit Mode 2 - Row Select
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x0F);				//--- Cursor on, Blinking on
 27c:	8f e0       	ldi	r24, 0x0F	; 15
 27e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x01);				//--- Clear LCD
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x06);				//--- Auto increment Cursor
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x80);				//--- Row 1 Column 1 Address
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_msg("CODE-N-LOGIC");	//--- String Send to LCD
 294:	85 ee       	ldi	r24, 0xE5	; 229
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 15 01 	call	0x22a	; 0x22a <twi_lcd_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	93 ed       	ldi	r25, 0xD3	; 211
 2a0:	20 e3       	ldi	r18, 0x30	; 48
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	20 40       	sbci	r18, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <twi_lcd_init+0x56>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <twi_lcd_init+0x60>
 2ac:	00 00       	nop
	_delay_ms(1000);				//--- 1s Delay
	twi_lcd_clear();				//--- Clear LCD
 2ae:	0e 94 22 01 	call	0x244	; 0x244 <twi_lcd_clear>
	twi_lcd_cmd(0x80);				//--- Row 1 Column 1 Address
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
 2b8:	08 95       	ret

000002ba <bcd_decoder_active_low>:
#include <stdio.h>
#include <string.h>


uint16_t bcd_decoder_active_low(uint8_t input) {
	if (input > 9) {
 2ba:	8a 30       	cpi	r24, 0x0A	; 10
 2bc:	68 f4       	brcc	.+26     	; 0x2d8 <bcd_decoder_active_low+0x1e>

	// Set all outputs HIGH
	uint16_t output = 0x03FF; // 10 bits, all HIGH (O0-O9)

	// Set the corresponding output LOW
	output &= ~(1 << input); // Clear the bit corresponding to the decimal value
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	a9 01       	movw	r20, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <bcd_decoder_active_low+0x10>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <bcd_decoder_active_low+0xc>
 2ce:	ca 01       	movw	r24, r20
 2d0:	80 95       	com	r24
 2d2:	90 95       	com	r25

	return output;
 2d4:	93 70       	andi	r25, 0x03	; 3
 2d6:	08 95       	ret


uint16_t bcd_decoder_active_low(uint8_t input) {
	if (input > 9) {
		// Invalid BCD input, return all HIGH (inactive state)
		return 0xFFFF; // 16 bits, all HIGH
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9f ef       	ldi	r25, 0xFF	; 255

	// Set the corresponding output LOW
	output &= ~(1 << input); // Clear the bit corresponding to the decimal value

	return output;
}
 2dc:	08 95       	ret

000002de <IC_7442>:

    // Perform logical AND operation
    return (bit0 && bit1 && bit3 && bit4);
}

int IC_7442() {
 2de:	cf 93       	push	r28
		// Configure PA1 to PA4 as outputs
		DDRA |= (1 << PA1) | (1 << PA2) | (1 << PA3) | (1 << PA4);
 2e0:	8a b3       	in	r24, 0x1a	; 26
 2e2:	8e 61       	ori	r24, 0x1E	; 30
 2e4:	8a bb       	out	0x1a, r24	; 26

		// Configure PB0 to PB6 and PA5 to PA7 as inputs
		DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) |
 2e6:	87 b3       	in	r24, 0x17	; 23
 2e8:	80 78       	andi	r24, 0x80	; 128
 2ea:	87 bb       	out	0x17, r24	; 23
		(1 << PB4) | (1 << PB5) | (1 << PB6));
		DDRA &= ~((1 << PA5) | (1 << PA6) | (1 << PA7));
 2ec:	8a b3       	in	r24, 0x1a	; 26
 2ee:	8f 71       	andi	r24, 0x1F	; 31
 2f0:	8a bb       	out	0x1a, r24	; 26

		// Optional: Enable pull-up resistors (if required)
		PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) |
 2f2:	88 b3       	in	r24, 0x18	; 24
 2f4:	8f 67       	ori	r24, 0x7F	; 127
 2f6:	88 bb       	out	0x18, r24	; 24
		(1 << PB4) | (1 << PB5) | (1 << PB6);
		PORTA |= (1 << PA5) | (1 << PA6) | (1 << PA7);
 2f8:	8b b3       	in	r24, 0x1b	; 27
 2fa:	80 6e       	ori	r24, 0xE0	; 224
 2fc:	8b bb       	out	0x1b, r24	; 27

		uint8_t count = 0;      // Counter for PA1 to PA4 output
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
		uint8_t passed = 1;      // Counter for PA1 to PA4 output
		uint16_t combined_input; // Variable to store the 10-bit combined input
		
		while (1) {
			// --- Step 1: Output 0 to 9 on PA1 to PA4 ---
			PORTA = (PORTA & 0xE1) | ((count << 1) & 0x1E); // Update PA4-PA1
 300:	2b b3       	in	r18, 0x1b	; 27
 302:	8c 2f       	mov	r24, r28
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	92 2f       	mov	r25, r18
 30c:	91 7e       	andi	r25, 0xE1	; 225
 30e:	8e 71       	andi	r24, 0x1E	; 30
 310:	89 2b       	or	r24, r25
 312:	8b bb       	out	0x1b, r24	; 27
			
			uint16_t expected = bcd_decoder_active_low(count);
 314:	8c 2f       	mov	r24, r28
 316:	0e 94 5d 01 	call	0x2ba	; 0x2ba <bcd_decoder_active_low>
 31a:	ac 01       	movw	r20, r24
			count++;
 31c:	cf 5f       	subi	r28, 0xFF	; 255

			if (count > 10) {
 31e:	cb 30       	cpi	r28, 0x0B	; 11
 320:	08 f5       	brcc	.+66     	; 0x364 <IC_7442+0x86>
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	83 ec       	ldi	r24, 0xC3	; 195
 326:	99 e0       	ldi	r25, 0x09	; 9
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <IC_7442+0x4a>
 330:	00 c0       	rjmp	.+0      	; 0x332 <IC_7442+0x54>
 332:	00 00       	nop

			// Short delay for visibility of the output
			_delay_ms(200);

			// --- Step 2: Read inputs from PB0 to PB6 and PA5 to PA7 ---
			uint8_t portb_data = PINB & 0x7F;         // Mask PB0 to PB6
 334:	96 b3       	in	r25, 0x16	; 22
 336:	9f 77       	andi	r25, 0x7F	; 127
			uint8_t porta_data = (PINA >> 5) & 0x07; // Mask and shift PA5 to PA7
 338:	29 b3       	in	r18, 0x19	; 25
 33a:	22 95       	swap	r18
 33c:	26 95       	lsr	r18
 33e:	27 70       	andi	r18, 0x07	; 7
			combined_input = (porta_data << 7) | portb_data;
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	28 9f       	mul	r18, r24
 344:	90 01       	movw	r18, r0
 346:	11 24       	eor	r1, r1
 348:	29 2b       	or	r18, r25

			if (combined_input != expected) {
 34a:	42 17       	cp	r20, r18
 34c:	53 07       	cpc	r21, r19
 34e:	61 f4       	brne	.+24     	; 0x368 <IC_7442+0x8a>
 350:	9f ef       	ldi	r25, 0xFF	; 255
 352:	21 ee       	ldi	r18, 0xE1	; 225
 354:	84 e0       	ldi	r24, 0x04	; 4
 356:	91 50       	subi	r25, 0x01	; 1
 358:	20 40       	sbci	r18, 0x00	; 0
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <IC_7442+0x78>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <IC_7442+0x82>
 360:	00 00       	nop
 362:	ce cf       	rjmp	.-100    	; 0x300 <IC_7442+0x22>
		PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) |
		(1 << PB4) | (1 << PB5) | (1 << PB6);
		PORTA |= (1 << PA5) | (1 << PA6) | (1 << PA7);

		uint8_t count = 0;      // Counter for PA1 to PA4 output
		uint8_t passed = 1;      // Counter for PA1 to PA4 output
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	01 c0       	rjmp	.+2      	; 0x36a <IC_7442+0x8c>
			uint8_t portb_data = PINB & 0x7F;         // Mask PB0 to PB6
			uint8_t porta_data = (PINA >> 5) & 0x07; // Mask and shift PA5 to PA7
			combined_input = (porta_data << 7) | portb_data;

			if (combined_input != expected) {
				passed = 0;
 368:	80 e0       	ldi	r24, 0x00	; 0

			// Small delay before the next cycle
			_delay_ms(100);
		}
		return passed;
}
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <calculate_and>:
}
// Function to calculate logical AND of the 4 bits
bool calculate_and(uint8_t value) {
	// Extract individual bits from the 4-bit value
	bool bit1 = (value & (1 << 1)) >> 1; // PA1
	bool bit2 = (value & (1 << 2)) >> 2; // PA2
 370:	28 2f       	mov	r18, r24
 372:	24 70       	andi	r18, 0x04	; 4
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	35 95       	asr	r19
 378:	27 95       	ror	r18
 37a:	35 95       	asr	r19
 37c:	27 95       	ror	r18
	bool bit4 = (value & (1 << 4)) >> 4; // PA4
 37e:	48 2f       	mov	r20, r24
 380:	40 71       	andi	r20, 0x10	; 16
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	55 95       	asr	r21
 386:	47 95       	ror	r20
 388:	55 95       	asr	r21
 38a:	47 95       	ror	r20
 38c:	55 95       	asr	r21
 38e:	47 95       	ror	r20
 390:	55 95       	asr	r21
 392:	47 95       	ror	r20
	bool bit5 = (value & (1 << 5)) >> 5; // PA5
 394:	68 2f       	mov	r22, r24
 396:	60 72       	andi	r22, 0x20	; 32
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	75 95       	asr	r23
 39c:	67 95       	ror	r22
 39e:	75 95       	asr	r23
 3a0:	67 95       	ror	r22
 3a2:	75 95       	asr	r23
 3a4:	67 95       	ror	r22
 3a6:	75 95       	asr	r23
 3a8:	67 95       	ror	r22
 3aa:	75 95       	asr	r23
 3ac:	67 95       	ror	r22

	// Perform logical AND operation
	return bit1 && bit2 && bit4 && bit5;
 3ae:	81 ff       	sbrs	r24, 1
 3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <calculate_and+0x52>
 3b2:	23 2b       	or	r18, r19
 3b4:	41 f0       	breq	.+16     	; 0x3c6 <calculate_and+0x56>
 3b6:	45 2b       	or	r20, r21
 3b8:	41 f0       	breq	.+16     	; 0x3ca <calculate_and+0x5a>
 3ba:	67 2b       	or	r22, r23
 3bc:	41 f4       	brne	.+16     	; 0x3ce <calculate_and+0x5e>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	08 95       	ret
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
 3ce:	81 e0       	ldi	r24, 0x01	; 1
}
 3d0:	08 95       	ret

000003d2 <calculate_and2>:
bool calculate_and2(uint8_t value) {
    // Extract individual bits from the 4-bit value
    uint8_t bit0 = value & (1 << 0);  // PB0
    uint8_t bit1 = value & (1 << 1);  // PB1
 3d2:	98 2f       	mov	r25, r24
 3d4:	92 70       	andi	r25, 0x02	; 2
    uint8_t bit3 = value & (1 << 3);  // PB3
 3d6:	28 2f       	mov	r18, r24
 3d8:	28 70       	andi	r18, 0x08	; 8
    uint8_t bit4 = value & (1 << 4);  // PB4
 3da:	38 2f       	mov	r19, r24
 3dc:	30 71       	andi	r19, 0x10	; 16

    // Perform logical AND operation
    return (bit0 && bit1 && bit3 && bit4);
 3de:	80 ff       	sbrs	r24, 0
 3e0:	08 c0       	rjmp	.+16     	; 0x3f2 <calculate_and2+0x20>
 3e2:	99 23       	and	r25, r25
 3e4:	41 f0       	breq	.+16     	; 0x3f6 <calculate_and2+0x24>
 3e6:	22 23       	and	r18, r18
 3e8:	41 f0       	breq	.+16     	; 0x3fa <calculate_and2+0x28>
 3ea:	31 11       	cpse	r19, r1
 3ec:	08 c0       	rjmp	.+16     	; 0x3fe <calculate_and2+0x2c>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
 3fe:	81 e0       	ldi	r24, 0x01	; 1
}
 400:	08 95       	ret

00000402 <IC_7421>:
			// Small delay before the next cycle
			_delay_ms(100);
		}
		return passed;
}
int IC_7421() {
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
	
	uint8_t passed = 1;
	
	
	
	DDRA |= (1 << PA1) | (1 << PA2) | (1 << PA4) | (1 << PA5);
 40a:	8a b3       	in	r24, 0x1a	; 26
 40c:	86 63       	ori	r24, 0x36	; 54
 40e:	8a bb       	out	0x1a, r24	; 26

	DDRA &= ~(1 << PA6);
 410:	8a b3       	in	r24, 0x1a	; 26
 412:	8f 7b       	andi	r24, 0xBF	; 191
 414:	8a bb       	out	0x1a, r24	; 26

	PORTA |= (1 << PA6);
 416:	8b b3       	in	r24, 0x1b	; 27
 418:	80 64       	ori	r24, 0x40	; 64
 41a:	8b bb       	out	0x1b, r24	; 27

	
	
	for (uint8_t value = 0; value < 16; value++) {
 41c:	c0 e0       	ldi	r28, 0x00	; 0
 41e:	38 c0       	rjmp	.+112    	; 0x490 <IC_7421+0x8e>
		PORTA = (PORTA & ~(0b00110110)) | 
 420:	eb b3       	in	r30, 0x1b	; 27
		((value & 0x01) << PA1) |
 422:	0c 2f       	mov	r16, r28
 424:	01 70       	andi	r16, 0x01	; 1
 426:	10 e0       	ldi	r17, 0x00	; 0
 428:	b8 01       	movw	r22, r16
 42a:	66 0f       	add	r22, r22
 42c:	77 1f       	adc	r23, r23
		((value & 0x02) << PA2) | 
 42e:	9c 2f       	mov	r25, r28
 430:	92 70       	andi	r25, 0x02	; 2
 432:	49 2f       	mov	r20, r25
 434:	50 e0       	ldi	r21, 0x00	; 0
 436:	44 0f       	add	r20, r20
 438:	55 1f       	adc	r21, r21
 43a:	44 0f       	add	r20, r20
 43c:	55 1f       	adc	r21, r21
		((value & 0x04) << (PA4 - 2)) | 
 43e:	9c 2f       	mov	r25, r28
 440:	94 70       	andi	r25, 0x04	; 4
 442:	29 2f       	mov	r18, r25
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	22 0f       	add	r18, r18
 448:	33 1f       	adc	r19, r19
 44a:	22 0f       	add	r18, r18
 44c:	33 1f       	adc	r19, r19
		((value & 0x08) << (PA5 - 3));  
 44e:	9c 2f       	mov	r25, r28
 450:	98 70       	andi	r25, 0x08	; 8
 452:	89 2f       	mov	r24, r25
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
	PORTA |= (1 << PA6);

	
	
	for (uint8_t value = 0; value < 16; value++) {
		PORTA = (PORTA & ~(0b00110110)) | 
 45e:	9e 2f       	mov	r25, r30
 460:	99 7c       	andi	r25, 0xC9	; 201
 462:	69 2b       	or	r22, r25
 464:	46 2b       	or	r20, r22
 466:	24 2b       	or	r18, r20
 468:	82 2b       	or	r24, r18
 46a:	8b bb       	out	0x1b, r24	; 27
 46c:	2f ef       	ldi	r18, 0xFF	; 255
 46e:	81 ee       	ldi	r24, 0xE1	; 225
 470:	94 e0       	ldi	r25, 0x04	; 4
 472:	21 50       	subi	r18, 0x01	; 1
 474:	80 40       	sbci	r24, 0x00	; 0
 476:	90 40       	sbci	r25, 0x00	; 0
 478:	e1 f7       	brne	.-8      	; 0x472 <IC_7421+0x70>
 47a:	00 c0       	rjmp	.+0      	; 0x47c <IC_7421+0x7a>
 47c:	00 00       	nop

		// Delay for stability
		_delay_ms(100);

		// Calculate AND of the 4 bits
		bool and_result = calculate_and(value);
 47e:	8c 2f       	mov	r24, r28
 480:	0e 94 b8 01 	call	0x370	; 0x370 <calculate_and>

		// Read PA6 value
		bool pa6_value = (PINA & (1 << PA6)) >> PA6;
 484:	91 e0       	ldi	r25, 0x01	; 1
 486:	ce 9b       	sbis	0x19, 6	; 25
 488:	90 e0       	ldi	r25, 0x00	; 0

		// Check if PA6 matches the AND result
		if (pa6_value == and_result) {
 48a:	89 13       	cpse	r24, r25
 48c:	05 c0       	rjmp	.+10     	; 0x498 <IC_7421+0x96>

	PORTA |= (1 << PA6);

	
	
	for (uint8_t value = 0; value < 16; value++) {
 48e:	cf 5f       	subi	r28, 0xFF	; 255
 490:	c0 31       	cpi	r28, 0x10	; 16
 492:	30 f2       	brcs	.-116    	; 0x420 <IC_7421+0x1e>
		}
		return passed;
}
int IC_7421() {
	
	uint8_t passed = 1;
 494:	d1 e0       	ldi	r29, 0x01	; 1
 496:	01 c0       	rjmp	.+2      	; 0x49a <IC_7421+0x98>
		// Check if PA6 matches the AND result
		if (pa6_value == and_result) {
			// Match found
			// Do something (e.g., toggle an LED, log, etc.)
			} else {
			passed = 0;
 498:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}
	}
		
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB3) | (1 << PB4);
 49a:	87 b3       	in	r24, 0x17	; 23
 49c:	8b 61       	ori	r24, 0x1B	; 27
 49e:	87 bb       	out	0x17, r24	; 23

	DDRB &= ~(1 << PB5);
 4a0:	87 b3       	in	r24, 0x17	; 23
 4a2:	8f 7d       	andi	r24, 0xDF	; 223
 4a4:	87 bb       	out	0x17, r24	; 23

	PORTB |= (1 << PB5);
 4a6:	88 b3       	in	r24, 0x18	; 24
 4a8:	80 62       	ori	r24, 0x20	; 32
 4aa:	88 bb       	out	0x18, r24	; 24
	for (uint8_t value = 0; value < 16; value++) {
 4ac:	c0 e0       	ldi	r28, 0x00	; 0
 4ae:	2e c0       	rjmp	.+92     	; 0x50c <IC_7421+0x10a>
		PORTB = (PORTB & ~(0b00011011)) |
 4b0:	68 b3       	in	r22, 0x18	; 24
		((value & 0x01) << PB0) |
		((value & 0x02) << PB1) |
 4b2:	9c 2f       	mov	r25, r28
 4b4:	92 70       	andi	r25, 0x02	; 2
 4b6:	49 2f       	mov	r20, r25
 4b8:	50 e0       	ldi	r21, 0x00	; 0
 4ba:	44 0f       	add	r20, r20
 4bc:	55 1f       	adc	r21, r21
		((value & 0x04) << (PB3 - 2)) |
 4be:	9c 2f       	mov	r25, r28
 4c0:	94 70       	andi	r25, 0x04	; 4
 4c2:	29 2f       	mov	r18, r25
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	22 0f       	add	r18, r18
 4c8:	33 1f       	adc	r19, r19
		((value & 0x08) << (PB4 - 3));
 4ca:	9c 2f       	mov	r25, r28
 4cc:	98 70       	andi	r25, 0x08	; 8
 4ce:	89 2f       	mov	r24, r25
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25

	DDRB &= ~(1 << PB5);

	PORTB |= (1 << PB5);
	for (uint8_t value = 0; value < 16; value++) {
		PORTB = (PORTB & ~(0b00011011)) |
 4d6:	96 2f       	mov	r25, r22
 4d8:	94 7e       	andi	r25, 0xE4	; 228
 4da:	3c 2f       	mov	r19, r28
 4dc:	31 70       	andi	r19, 0x01	; 1
 4de:	93 2b       	or	r25, r19
 4e0:	49 2b       	or	r20, r25
 4e2:	24 2b       	or	r18, r20
 4e4:	82 2b       	or	r24, r18
 4e6:	88 bb       	out	0x18, r24	; 24
 4e8:	2f ef       	ldi	r18, 0xFF	; 255
 4ea:	81 ee       	ldi	r24, 0xE1	; 225
 4ec:	94 e0       	ldi	r25, 0x04	; 4
 4ee:	21 50       	subi	r18, 0x01	; 1
 4f0:	80 40       	sbci	r24, 0x00	; 0
 4f2:	90 40       	sbci	r25, 0x00	; 0
 4f4:	e1 f7       	brne	.-8      	; 0x4ee <IC_7421+0xec>
 4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <IC_7421+0xf6>
 4f8:	00 00       	nop

		// Delay for stability
		_delay_ms(100);

		// Calculate AND of the 4 bits
		bool and_result = calculate_and2(value);
 4fa:	8c 2f       	mov	r24, r28
 4fc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <calculate_and2>

		// Read PA6 value
		bool pa6_value = (PINB & (1 << PB5)) >> PB5;
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	b5 9b       	sbis	0x16, 5	; 22
 504:	90 e0       	ldi	r25, 0x00	; 0

		// Check if PA6 matches the AND result
		if (pa6_value == and_result) {
 506:	89 13       	cpse	r24, r25
 508:	04 c0       	rjmp	.+8      	; 0x512 <IC_7421+0x110>
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB3) | (1 << PB4);

	DDRB &= ~(1 << PB5);

	PORTB |= (1 << PB5);
	for (uint8_t value = 0; value < 16; value++) {
 50a:	cf 5f       	subi	r28, 0xFF	; 255
 50c:	c0 31       	cpi	r28, 0x10	; 16
 50e:	80 f2       	brcs	.-96     	; 0x4b0 <IC_7421+0xae>
 510:	01 c0       	rjmp	.+2      	; 0x514 <IC_7421+0x112>
		// Check if PA6 matches the AND result
		if (pa6_value == and_result) {
			// Match found
			// Do something (e.g., toggle an LED, log, etc.)
			} else {
			passed = 0;
 512:	d0 e0       	ldi	r29, 0x00	; 0
			break;
		}
	}
	return passed;
 514:	8d 2f       	mov	r24, r29
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	1f 91       	pop	r17
 51e:	0f 91       	pop	r16
 520:	08 95       	ret

00000522 <main>:
#include "twi_lcd.h"
#include "ics_conf.c"
#include <util/delay.h>


int main() {
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	00 d0       	rcall	.+0      	; 0x528 <main+0x6>
 528:	00 d0       	rcall	.+0      	; 0x52a <main+0x8>
 52a:	cd b7       	in	r28, 0x3d	; 61
 52c:	de b7       	in	r29, 0x3e	; 62
	    // Create an array of function pointers
	int (*ICsfunctionsArray[])() = {IC_7442, IC_7421};
 52e:	8f e6       	ldi	r24, 0x6F	; 111
 530:	91 e0       	ldi	r25, 0x01	; 1
 532:	9a 83       	std	Y+2, r25	; 0x02
 534:	89 83       	std	Y+1, r24	; 0x01
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	92 e0       	ldi	r25, 0x02	; 2
 53a:	9c 83       	std	Y+4, r25	; 0x04
 53c:	8b 83       	std	Y+3, r24	; 0x03
	// Determine the size of the array
	uint8_t numFunctions = sizeof(ICsfunctionsArray) / sizeof(ICsfunctionsArray[0]);
	uint8_t found = 0;
	// Run the IC 7442 test
	while (1) {
		for (uint8_t i = 0; i < numFunctions; i++) {
 53e:	10 e0       	ldi	r17, 0x00	; 0
 540:	00 e0       	ldi	r16, 0x00	; 0
 542:	3a c0       	rjmp	.+116    	; 0x5b8 <main+0x96>
			// Call each function in the array
			if (ICsfunctionsArray[i]()) {
 544:	e1 2f       	mov	r30, r17
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	ee 0f       	add	r30, r30
 54a:	ff 1f       	adc	r31, r31
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	8c 0f       	add	r24, r28
 552:	9d 1f       	adc	r25, r29
 554:	e8 0f       	add	r30, r24
 556:	f9 1f       	adc	r31, r25
 558:	01 90       	ld	r0, Z+
 55a:	f0 81       	ld	r31, Z
 55c:	e0 2d       	mov	r30, r0
 55e:	09 95       	icall
 560:	89 2b       	or	r24, r25
 562:	49 f1       	breq	.+82     	; 0x5b6 <main+0x94>
				if (i == 0) {
 564:	11 11       	cpse	r17, r1
 566:	13 c0       	rjmp	.+38     	; 0x58e <main+0x6c>
					found = 1;
					twi_init();
 568:	0e 94 65 00 	call	0xca	; 0xca <twi_init>
					twi_lcd_init();
 56c:	0e 94 26 01 	call	0x24c	; 0x24c <twi_lcd_init>
					twi_lcd_msg("found: 7442 IC");
 570:	82 ef       	ldi	r24, 0xF2	; 242
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 15 01 	call	0x22a	; 0x22a <twi_lcd_msg>
 578:	9f ef       	ldi	r25, 0xFF	; 255
 57a:	29 e6       	ldi	r18, 0x69	; 105
 57c:	88 e1       	ldi	r24, 0x18	; 24
 57e:	91 50       	subi	r25, 0x01	; 1
 580:	20 40       	sbci	r18, 0x00	; 0
 582:	80 40       	sbci	r24, 0x00	; 0
 584:	e1 f7       	brne	.-8      	; 0x57e <main+0x5c>
 586:	00 c0       	rjmp	.+0      	; 0x588 <main+0x66>
 588:	00 00       	nop
	while (1) {
		for (uint8_t i = 0; i < numFunctions; i++) {
			// Call each function in the array
			if (ICsfunctionsArray[i]()) {
				if (i == 0) {
					found = 1;
 58a:	01 e0       	ldi	r16, 0x01	; 1
 58c:	14 c0       	rjmp	.+40     	; 0x5b6 <main+0x94>
					twi_init();
					twi_lcd_init();
					twi_lcd_msg("found: 7442 IC");
					_delay_ms(500);

				}else if (i == 1) {
 58e:	11 30       	cpi	r17, 0x01	; 1
 590:	91 f4       	brne	.+36     	; 0x5b6 <main+0x94>
					found = 1;
					twi_init();
 592:	0e 94 65 00 	call	0xca	; 0xca <twi_init>
					twi_lcd_init();
 596:	0e 94 26 01 	call	0x24c	; 0x24c <twi_lcd_init>
					twi_lcd_msg("found: 7421 IC");
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 15 01 	call	0x22a	; 0x22a <twi_lcd_msg>
 5a2:	9f ef       	ldi	r25, 0xFF	; 255
 5a4:	29 e6       	ldi	r18, 0x69	; 105
 5a6:	88 e1       	ldi	r24, 0x18	; 24
 5a8:	91 50       	subi	r25, 0x01	; 1
 5aa:	20 40       	sbci	r18, 0x00	; 0
 5ac:	80 40       	sbci	r24, 0x00	; 0
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <main+0x86>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <main+0x90>
 5b2:	00 00       	nop
					twi_lcd_init();
					twi_lcd_msg("found: 7442 IC");
					_delay_ms(500);

				}else if (i == 1) {
					found = 1;
 5b4:	01 e0       	ldi	r16, 0x01	; 1
	// Determine the size of the array
	uint8_t numFunctions = sizeof(ICsfunctionsArray) / sizeof(ICsfunctionsArray[0]);
	uint8_t found = 0;
	// Run the IC 7442 test
	while (1) {
		for (uint8_t i = 0; i < numFunctions; i++) {
 5b6:	1f 5f       	subi	r17, 0xFF	; 255
 5b8:	12 30       	cpi	r17, 0x02	; 2
 5ba:	20 f2       	brcs	.-120    	; 0x544 <main+0x22>
					_delay_ms(500);
				}
			}

		}
		if (!found) {
 5bc:	01 11       	cpse	r16, r1
 5be:	bf cf       	rjmp	.-130    	; 0x53e <main+0x1c>
			twi_init();
 5c0:	0e 94 65 00 	call	0xca	; 0xca <twi_init>
			twi_lcd_init();
 5c4:	0e 94 26 01 	call	0x24c	; 0x24c <twi_lcd_init>
			twi_lcd_msg("Unknown IC");
 5c8:	80 e1       	ldi	r24, 0x10	; 16
 5ca:	91 e0       	ldi	r25, 0x01	; 1
 5cc:	0e 94 15 01 	call	0x22a	; 0x22a <twi_lcd_msg>
 5d0:	9f ef       	ldi	r25, 0xFF	; 255
 5d2:	29 e6       	ldi	r18, 0x69	; 105
 5d4:	88 e1       	ldi	r24, 0x18	; 24
 5d6:	91 50       	subi	r25, 0x01	; 1
 5d8:	20 40       	sbci	r18, 0x00	; 0
 5da:	80 40       	sbci	r24, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <main+0xb4>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <main+0xbe>
 5e0:	00 00       	nop
 5e2:	ad cf       	rjmp	.-166    	; 0x53e <main+0x1c>

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
