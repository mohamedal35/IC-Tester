
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00000402  00000496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080010c  0080010c  00000542  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f87  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074a  00000000  00000000  000015ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b4  00000000  00000000  00001d49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00002500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c5  00000000  00000000  000026c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000071d  00000000  00000000  00002b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000032a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 30       	cpi	r26, 0x0C	; 12
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e0       	ldi	r26, 0x0C	; 12
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 30       	cpi	r26, 0x0D	; 13
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 01 	call	0x370	; 0x370 <main>
  8a:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <twi_stop>:
	while (!(TWCR & (1<<TWINT)));				//--- Wait until No Acknowledgment Condition is transmitted to Slave
	while(TW_STATUS != TW_MR_DATA_NACK);		//--- Check for Acknowledgment
	usart_msg("Receiving MR Data NACK");		//--- Feedback msg to check error
	usart_tx(0x0D);								//--- Next Line
	return TWDR;								//--- Return received data
}
  92:	84 e9       	ldi	r24, 0x94	; 148
  94:	86 bf       	out	0x36, r24	; 54
  96:	08 95       	ret

00000098 <usart_init>:
  98:	10 bc       	out	0x20, r1	; 32
  9a:	88 e0       	ldi	r24, 0x08	; 8
  9c:	89 b9       	out	0x09, r24	; 9
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	8a b9       	out	0x0a, r24	; 10
  a6:	08 95       	ret

000000a8 <usart_tx>:
  a8:	5d 9b       	sbis	0x0b, 5	; 11
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <usart_tx>
  ac:	8c b9       	out	0x0c, r24	; 12
  ae:	08 95       	ret

000000b0 <usart_msg>:
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
  b6:	03 c0       	rjmp	.+6      	; 0xbe <usart_msg+0xe>
  b8:	21 96       	adiw	r28, 0x01	; 1
  ba:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
  be:	88 81       	ld	r24, Y
  c0:	81 11       	cpse	r24, r1
  c2:	fa cf       	rjmp	.-12     	; 0xb8 <usart_msg+0x8>
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <twi_init>:
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	84 bb       	out	0x14, r24	; 20
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	0e 94 4c 00 	call	0x98	; 0x98 <usart_init>
  d4:	80 e6       	ldi	r24, 0x60	; 96
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_msg>
  dc:	8d e0       	ldi	r24, 0x0D	; 13
  de:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
  e2:	86 b7       	in	r24, 0x36	; 54
  e4:	8b 7f       	andi	r24, 0xFB	; 251
  e6:	86 bf       	out	0x36, r24	; 54
  e8:	11 b8       	out	0x01, r1	; 1
  ea:	8c e0       	ldi	r24, 0x0C	; 12
  ec:	80 b9       	out	0x00, r24	; 0
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	86 bf       	out	0x36, r24	; 54
  f2:	85 e3       	ldi	r24, 0x35	; 53
  f4:	8a 95       	dec	r24
  f6:	f1 f7       	brne	.-4      	; 0xf4 <twi_init+0x2a>
  f8:	00 00       	nop
  fa:	08 95       	ret

000000fc <twi_start>:
  fc:	84 ea       	ldi	r24, 0xA4	; 164
  fe:	86 bf       	out	0x36, r24	; 54
 100:	06 b6       	in	r0, 0x36	; 54
 102:	07 fe       	sbrs	r0, 7
 104:	fd cf       	rjmp	.-6      	; 0x100 <twi_start+0x4>
 106:	81 b1       	in	r24, 0x01	; 1
 108:	88 7f       	andi	r24, 0xF8	; 248
 10a:	88 30       	cpi	r24, 0x08	; 8
 10c:	e1 f7       	brne	.-8      	; 0x106 <twi_start+0xa>
 10e:	8c ea       	ldi	r24, 0xAC	; 172
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_msg>
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
 11c:	08 95       	ret

0000011e <twi_write_cmd>:
 11e:	83 b9       	out	0x03, r24	; 3
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	86 bf       	out	0x36, r24	; 54
 124:	06 b6       	in	r0, 0x36	; 54
 126:	07 fe       	sbrs	r0, 7
 128:	fd cf       	rjmp	.-6      	; 0x124 <twi_write_cmd+0x6>
 12a:	81 b1       	in	r24, 0x01	; 1
 12c:	88 7f       	andi	r24, 0xF8	; 248
 12e:	88 31       	cpi	r24, 0x18	; 24
 130:	e1 f7       	brne	.-8      	; 0x12a <twi_write_cmd+0xc>
 132:	82 e7       	ldi	r24, 0x72	; 114
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_msg>
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
 140:	08 95       	ret

00000142 <twi_write_dwr>:
 142:	83 b9       	out	0x03, r24	; 3
 144:	84 e8       	ldi	r24, 0x84	; 132
 146:	86 bf       	out	0x36, r24	; 54
 148:	06 b6       	in	r0, 0x36	; 54
 14a:	07 fe       	sbrs	r0, 7
 14c:	fd cf       	rjmp	.-6      	; 0x148 <twi_write_dwr+0x6>
 14e:	81 b1       	in	r24, 0x01	; 1
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	88 32       	cpi	r24, 0x28	; 40
 154:	e1 f7       	brne	.-8      	; 0x14e <twi_write_dwr+0xc>
 156:	8a e8       	ldi	r24, 0x8A	; 138
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 58 00 	call	0xb0	; 0xb0 <usart_msg>
 15e:	8d e0       	ldi	r24, 0x0D	; 13
 160:	0e 94 54 00 	call	0xa8	; 0xa8 <usart_tx>
 164:	08 95       	ret

00000166 <PCF8574_write>:
unsigned char lcd = 0x00;						//--- Declaring a variable as lcd for data operation

/* Function to Write data in PCF8574 */

void PCF8574_write(unsigned char x)
{
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
		twi_start();							//--- Start Condition 
 16a:	0e 94 7e 00 	call	0xfc	; 0xfc <twi_start>
		twi_write_cmd((PCF8574 << 1)| WRITE);	//--- SLA+W is Send 0x40 
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	0e 94 8f 00 	call	0x11e	; 0x11e <twi_write_cmd>
		twi_write_dwr(x);						//--- Data to Slave Device
 174:	8c 2f       	mov	r24, r28
 176:	0e 94 a1 00 	call	0x142	; 0x142 <twi_write_dwr>
		twi_stop();								//--- Stop Condition 
 17a:	0e 94 49 00 	call	0x92	; 0x92 <twi_stop>
}
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <twi_lcd_4bit_send>:

/* Function to Write 4-bit data to LCD */

void twi_lcd_4bit_send(unsigned char x)
{
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
	unsigned char temp = 0x00;					//--- temp variable for data operation
	
	lcd &= 0x0F;								//--- Masking last four bit to prevent the RS, RW, EN, Backlight
 186:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 18a:	8f 70       	andi	r24, 0x0F	; 15
	temp = (x & 0xF0);							//--- Masking higher 4-Bit of Data and send it LCD
 18c:	9c 2f       	mov	r25, r28
 18e:	90 7f       	andi	r25, 0xF0	; 240
	lcd |= temp;								//--- 4-Bit Data and LCD control Pin
 190:	89 2b       	or	r24, r25
	lcd |= (0x04);								//--- Latching Data to LCD EN = 1
 192:	84 60       	ori	r24, 0x04	; 4
 194:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 198:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	85 e0       	ldi	r24, 0x05	; 5
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <twi_lcd_4bit_send+0x1c>
 1a2:	00 00       	nop
	_delay_us(1);								//--- 1us Delay
	lcd &= ~(0x04);								//--- Latching Complete
 1a4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT 
 1ae:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
 1b2:	8a e1       	ldi	r24, 0x1A	; 26
 1b4:	8a 95       	dec	r24
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <twi_lcd_4bit_send+0x32>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <twi_lcd_4bit_send+0x38>
	_delay_us(5);								//--- 5us Delay to Complete Latching
	
	
	temp = ((x & 0x0F)<<4);						//--- Masking Lower 4-Bit of Data and send it LCD
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	c8 9f       	mul	r28, r24
 1be:	90 01       	movw	r18, r0
 1c0:	11 24       	eor	r1, r1
	lcd &= 0x0F;								//--- Masking last four bit to prevent the RS, RW, EN, Backlight					
 1c2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1c6:	8f 70       	andi	r24, 0x0F	; 15
	lcd |= temp;								//--- 4-Bit Data and LCD control Pin
 1c8:	82 2b       	or	r24, r18
	lcd |= (0x04);								//--- Latching Data to LCD EN = 1
 1ca:	84 60       	ori	r24, 0x04	; 4
 1cc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 1d0:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
 1d4:	85 e0       	ldi	r24, 0x05	; 5
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <twi_lcd_4bit_send+0x54>
 1da:	00 00       	nop
	_delay_us(1);								//--- 1us Delay
	lcd &= ~(0x04);								//--- Latching Complete
 1dc:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 1e6:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
 1ea:	8a e1       	ldi	r24, 0x1A	; 26
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <twi_lcd_4bit_send+0x6a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <twi_lcd_4bit_send+0x70>
	_delay_us(5);								//--- 5us Delay to Complete Latching
	
}
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <twi_lcd_cmd>:

/* Function to Write to LCD Command Register */

void twi_lcd_cmd(unsigned char x)
{
 1f6:	cf 93       	push	r28
 1f8:	c8 2f       	mov	r28, r24
	lcd = 0x08;									//--- Enable Backlight Pin
 1fa:	88 e0       	ldi	r24, 0x08	; 8
 1fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	lcd &= ~(0x01);								//--- Select Command Register By RS = 0
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT
 200:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD 
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 c1 00 	call	0x182	; 0x182 <twi_lcd_4bit_send>
	
}
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <twi_lcd_dwr>:

/* Function to Write to LCD Command Register */

void twi_lcd_dwr(unsigned char x)
{
 20e:	cf 93       	push	r28
 210:	c8 2f       	mov	r28, r24
	lcd |= 0x09;								//--- Enable Backlight Pin & Select Data Register By RS = 1
 212:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 216:	89 60       	ori	r24, 0x09	; 9
 218:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	PCF8574_write(lcd);							//--- Send Data From PCF8574 to LCD PORT	
 21c:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
	twi_lcd_4bit_send(x);						//--- Function to Write 4-bit data to LCD
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 c1 00 	call	0x182	; 0x182 <twi_lcd_4bit_send>
}
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <twi_lcd_msg>:

/* Function to Send String of Data */

void twi_lcd_msg(char *c)
{
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	ec 01       	movw	r28, r24
	while (*c != '\0')							//--- Check Pointer for Null
 230:	03 c0       	rjmp	.+6      	; 0x238 <twi_lcd_msg+0xe>
	twi_lcd_dwr(*c++);							//--- Send the String of Data
 232:	21 96       	adiw	r28, 0x01	; 1
 234:	0e 94 07 01 	call	0x20e	; 0x20e <twi_lcd_dwr>

/* Function to Send String of Data */

void twi_lcd_msg(char *c)
{
	while (*c != '\0')							//--- Check Pointer for Null
 238:	88 81       	ld	r24, Y
 23a:	81 11       	cpse	r24, r1
 23c:	fa cf       	rjmp	.-12     	; 0x232 <twi_lcd_msg+0x8>
	twi_lcd_dwr(*c++);							//--- Send the String of Data
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <twi_lcd_clear>:

/* Function to Execute Clear LCD Command */

void twi_lcd_clear()
{
	twi_lcd_cmd(0x01);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
 24a:	08 95       	ret

0000024c <twi_lcd_init>:

/* Function to Initialize LCD in 4-Bit Mode, Cursor Setting and Row Selection */

void twi_lcd_init()
{	
	lcd = 0x04;						//--- EN = 1 for 25us initialize Sequence
 24c:	84 e0       	ldi	r24, 0x04	; 4
 24e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	PCF8574_write(lcd);
 252:	0e 94 b3 00 	call	0x166	; 0x166 <PCF8574_write>
 256:	25 e8       	ldi	r18, 0x85	; 133
 258:	2a 95       	dec	r18
 25a:	f1 f7       	brne	.-4      	; 0x258 <twi_lcd_init+0xc>
 25c:	00 00       	nop
	_delay_us(25);
	
	twi_lcd_cmd(0x03);				//--- Initialize Sequence
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x03);				//--- Initialize Sequence
 264:	83 e0       	ldi	r24, 0x03	; 3
 266:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x03);				//--- Initialize Sequence
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x02);				//--- Return to Home
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x28);				//--- 4-Bit Mode 2 - Row Select
 276:	88 e2       	ldi	r24, 0x28	; 40
 278:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x0F);				//--- Cursor on, Blinking on
 27c:	8f e0       	ldi	r24, 0x0F	; 15
 27e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x01);				//--- Clear LCD
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x06);				//--- Auto increment Cursor
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_cmd(0x80);				//--- Row 1 Column 1 Address
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
	twi_lcd_msg("CODE-N-LOGIC");	//--- String Send to LCD
 294:	85 ee       	ldi	r24, 0xE5	; 229
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 15 01 	call	0x22a	; 0x22a <twi_lcd_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	93 ed       	ldi	r25, 0xD3	; 211
 2a0:	20 e3       	ldi	r18, 0x30	; 48
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	20 40       	sbci	r18, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <twi_lcd_init+0x56>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <twi_lcd_init+0x60>
 2ac:	00 00       	nop
	_delay_ms(1000);				//--- 1s Delay
	twi_lcd_clear();				//--- Clear LCD
 2ae:	0e 94 22 01 	call	0x244	; 0x244 <twi_lcd_clear>
	twi_lcd_cmd(0x80);				//--- Row 1 Column 1 Address
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <twi_lcd_cmd>
 2b8:	08 95       	ret

000002ba <bcd_decoder_active_low>:
#include <stdio.h>
#include <string.h>


uint16_t bcd_decoder_active_low(uint8_t input) {
	if (input > 9) {
 2ba:	8a 30       	cpi	r24, 0x0A	; 10
 2bc:	68 f4       	brcc	.+26     	; 0x2d8 <bcd_decoder_active_low+0x1e>

	// Set all outputs HIGH
	uint16_t output = 0x03FF; // 10 bits, all HIGH (O0-O9)

	// Set the corresponding output LOW
	output &= ~(1 << input); // Clear the bit corresponding to the decimal value
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	a9 01       	movw	r20, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <bcd_decoder_active_low+0x10>
 2c6:	44 0f       	add	r20, r20
 2c8:	55 1f       	adc	r21, r21
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <bcd_decoder_active_low+0xc>
 2ce:	ca 01       	movw	r24, r20
 2d0:	80 95       	com	r24
 2d2:	90 95       	com	r25

	return output;
 2d4:	93 70       	andi	r25, 0x03	; 3
 2d6:	08 95       	ret


uint16_t bcd_decoder_active_low(uint8_t input) {
	if (input > 9) {
		// Invalid BCD input, return all HIGH (inactive state)
		return 0xFFFF; // 16 bits, all HIGH
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9f ef       	ldi	r25, 0xFF	; 255

	// Set the corresponding output LOW
	output &= ~(1 << input); // Clear the bit corresponding to the decimal value

	return output;
}
 2dc:	08 95       	ret

000002de <IC_7442>:


int IC_7442() {
 2de:	cf 93       	push	r28
		// Configure PA1 to PA4 as outputs
		DDRA |= (1 << PA1) | (1 << PA2) | (1 << PA3) | (1 << PA4);
 2e0:	8a b3       	in	r24, 0x1a	; 26
 2e2:	8e 61       	ori	r24, 0x1E	; 30
 2e4:	8a bb       	out	0x1a, r24	; 26

		// Configure PB0 to PB6 and PA5 to PA7 as inputs
		DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) |
 2e6:	87 b3       	in	r24, 0x17	; 23
 2e8:	80 78       	andi	r24, 0x80	; 128
 2ea:	87 bb       	out	0x17, r24	; 23
		(1 << PB4) | (1 << PB5) | (1 << PB6));
		DDRA &= ~((1 << PA5) | (1 << PA6) | (1 << PA7));
 2ec:	8a b3       	in	r24, 0x1a	; 26
 2ee:	8f 71       	andi	r24, 0x1F	; 31
 2f0:	8a bb       	out	0x1a, r24	; 26

		// Optional: Enable pull-up resistors (if required)
		PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) |
 2f2:	88 b3       	in	r24, 0x18	; 24
 2f4:	8f 67       	ori	r24, 0x7F	; 127
 2f6:	88 bb       	out	0x18, r24	; 24
		(1 << PB4) | (1 << PB5) | (1 << PB6);
		PORTA |= (1 << PA5) | (1 << PA6) | (1 << PA7);
 2f8:	8b b3       	in	r24, 0x1b	; 27
 2fa:	80 6e       	ori	r24, 0xE0	; 224
 2fc:	8b bb       	out	0x1b, r24	; 27

		uint8_t count = 0;      // Counter for PA1 to PA4 output
 2fe:	c0 e0       	ldi	r28, 0x00	; 0
		uint8_t passed = 1;      // Counter for PA1 to PA4 output
		uint16_t combined_input; // Variable to store the 10-bit combined input
		
		while (1) {
			// --- Step 1: Output 0 to 9 on PA1 to PA4 ---
			PORTA = (PORTA & 0xE1) | ((count << 1) & 0x1E); // Update PA4-PA1
 300:	2b b3       	in	r18, 0x1b	; 27
 302:	8c 2f       	mov	r24, r28
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	92 2f       	mov	r25, r18
 30c:	91 7e       	andi	r25, 0xE1	; 225
 30e:	8e 71       	andi	r24, 0x1E	; 30
 310:	89 2b       	or	r24, r25
 312:	8b bb       	out	0x1b, r24	; 27
			
			uint16_t expected = bcd_decoder_active_low(count);
 314:	8c 2f       	mov	r24, r28
 316:	0e 94 5d 01 	call	0x2ba	; 0x2ba <bcd_decoder_active_low>
 31a:	ac 01       	movw	r20, r24
			count++;
 31c:	cf 5f       	subi	r28, 0xFF	; 255

			if (count > 9) {
 31e:	ca 30       	cpi	r28, 0x0A	; 10
 320:	08 f5       	brcc	.+66     	; 0x364 <IC_7442+0x86>
 322:	2f ef       	ldi	r18, 0xFF	; 255
 324:	83 ec       	ldi	r24, 0xC3	; 195
 326:	99 e0       	ldi	r25, 0x09	; 9
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <IC_7442+0x4a>
 330:	00 c0       	rjmp	.+0      	; 0x332 <IC_7442+0x54>
 332:	00 00       	nop

			// Short delay for visibility of the output
			_delay_ms(200);

			// --- Step 2: Read inputs from PB0 to PB6 and PA5 to PA7 ---
			uint8_t portb_data = PINB & 0x7F;         // Mask PB0 to PB6
 334:	96 b3       	in	r25, 0x16	; 22
 336:	9f 77       	andi	r25, 0x7F	; 127
			uint8_t porta_data = (PINA >> 5) & 0x07; // Mask and shift PA5 to PA7
 338:	29 b3       	in	r18, 0x19	; 25
 33a:	22 95       	swap	r18
 33c:	26 95       	lsr	r18
 33e:	27 70       	andi	r18, 0x07	; 7
			combined_input = (porta_data << 7) | portb_data;
 340:	80 e8       	ldi	r24, 0x80	; 128
 342:	28 9f       	mul	r18, r24
 344:	90 01       	movw	r18, r0
 346:	11 24       	eor	r1, r1
 348:	29 2b       	or	r18, r25

			if (combined_input != expected) {
 34a:	42 17       	cp	r20, r18
 34c:	53 07       	cpc	r21, r19
 34e:	61 f4       	brne	.+24     	; 0x368 <IC_7442+0x8a>
 350:	9f ef       	ldi	r25, 0xFF	; 255
 352:	21 ee       	ldi	r18, 0xE1	; 225
 354:	84 e0       	ldi	r24, 0x04	; 4
 356:	91 50       	subi	r25, 0x01	; 1
 358:	20 40       	sbci	r18, 0x00	; 0
 35a:	80 40       	sbci	r24, 0x00	; 0
 35c:	e1 f7       	brne	.-8      	; 0x356 <IC_7442+0x78>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <IC_7442+0x82>
 360:	00 00       	nop
 362:	ce cf       	rjmp	.-100    	; 0x300 <IC_7442+0x22>
		PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) |
		(1 << PB4) | (1 << PB5) | (1 << PB6);
		PORTA |= (1 << PA5) | (1 << PA6) | (1 << PA7);

		uint8_t count = 0;      // Counter for PA1 to PA4 output
		uint8_t passed = 1;      // Counter for PA1 to PA4 output
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	01 c0       	rjmp	.+2      	; 0x36a <IC_7442+0x8c>
			uint8_t portb_data = PINB & 0x7F;         // Mask PB0 to PB6
			uint8_t porta_data = (PINA >> 5) & 0x07; // Mask and shift PA5 to PA7
			combined_input = (porta_data << 7) | portb_data;

			if (combined_input != expected) {
				passed = 0;
 368:	80 e0       	ldi	r24, 0x00	; 0

			// Small delay before the next cycle
			_delay_ms(100);
		}
		return passed;
}
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <main>:
#include "twi_lcd.h"
#include "ics_conf.c"
#include <util/delay.h>


int main() {
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	00 d0       	rcall	.+0      	; 0x376 <main+0x6>
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	    // Create an array of function pointers
	int (*ICsfunctionsArray[])() = {IC_7442};
 37a:	8f e6       	ldi	r24, 0x6F	; 111
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	9a 83       	std	Y+2, r25	; 0x02
 380:	89 83       	std	Y+1, r24	; 0x01
	// Determine the size of the array
	uint8_t numFunctions = sizeof(ICsfunctionsArray) / sizeof(ICsfunctionsArray[0]);
	uint8_t found = 0;
	// Run the IC 7442 test
	while (1) {
		for (uint8_t i = 0; i < numFunctions; i++) {
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	00 e0       	ldi	r16, 0x00	; 0
 386:	25 c0       	rjmp	.+74     	; 0x3d2 <main+0x62>
			// Call each function in the array
			if (ICsfunctionsArray[i]()) {
 388:	e1 2f       	mov	r30, r17
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	8c 0f       	add	r24, r28
 396:	9d 1f       	adc	r25, r29
 398:	e8 0f       	add	r30, r24
 39a:	f9 1f       	adc	r31, r25
 39c:	01 90       	ld	r0, Z+
 39e:	f0 81       	ld	r31, Z
 3a0:	e0 2d       	mov	r30, r0
 3a2:	09 95       	icall
 3a4:	89 2b       	or	r24, r25
 3a6:	a1 f0       	breq	.+40     	; 0x3d0 <main+0x60>
				if (i == 0) {
 3a8:	11 11       	cpse	r17, r1
 3aa:	12 c0       	rjmp	.+36     	; 0x3d0 <main+0x60>
					found = 1;
					twi_init();
 3ac:	0e 94 65 00 	call	0xca	; 0xca <twi_init>
					twi_lcd_init();
 3b0:	0e 94 26 01 	call	0x24c	; 0x24c <twi_lcd_init>
					twi_lcd_msg("found: 7442 IC");
 3b4:	82 ef       	ldi	r24, 0xF2	; 242
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 15 01 	call	0x22a	; 0x22a <twi_lcd_msg>
 3bc:	9f ef       	ldi	r25, 0xFF	; 255
 3be:	29 e6       	ldi	r18, 0x69	; 105
 3c0:	88 e1       	ldi	r24, 0x18	; 24
 3c2:	91 50       	subi	r25, 0x01	; 1
 3c4:	20 40       	sbci	r18, 0x00	; 0
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x52>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x5c>
 3cc:	00 00       	nop
	while (1) {
		for (uint8_t i = 0; i < numFunctions; i++) {
			// Call each function in the array
			if (ICsfunctionsArray[i]()) {
				if (i == 0) {
					found = 1;
 3ce:	01 e0       	ldi	r16, 0x01	; 1
	// Determine the size of the array
	uint8_t numFunctions = sizeof(ICsfunctionsArray) / sizeof(ICsfunctionsArray[0]);
	uint8_t found = 0;
	// Run the IC 7442 test
	while (1) {
		for (uint8_t i = 0; i < numFunctions; i++) {
 3d0:	1f 5f       	subi	r17, 0xFF	; 255
 3d2:	11 23       	and	r17, r17
 3d4:	c9 f2       	breq	.-78     	; 0x388 <main+0x18>

				}
			}

		}
		if (!found) {
 3d6:	01 11       	cpse	r16, r1
 3d8:	d4 cf       	rjmp	.-88     	; 0x382 <main+0x12>
			twi_init();
 3da:	0e 94 65 00 	call	0xca	; 0xca <twi_init>
			twi_lcd_init();
 3de:	0e 94 26 01 	call	0x24c	; 0x24c <twi_lcd_init>
			twi_lcd_msg("Unknown IC");
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	0e 94 15 01 	call	0x22a	; 0x22a <twi_lcd_msg>
 3ea:	9f ef       	ldi	r25, 0xFF	; 255
 3ec:	29 e6       	ldi	r18, 0x69	; 105
 3ee:	88 e1       	ldi	r24, 0x18	; 24
 3f0:	91 50       	subi	r25, 0x01	; 1
 3f2:	20 40       	sbci	r18, 0x00	; 0
 3f4:	80 40       	sbci	r24, 0x00	; 0
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0x80>
 3f8:	00 c0       	rjmp	.+0      	; 0x3fa <main+0x8a>
 3fa:	00 00       	nop
 3fc:	c2 cf       	rjmp	.-124    	; 0x382 <main+0x12>

000003fe <_exit>:
 3fe:	f8 94       	cli

00000400 <__stop_program>:
 400:	ff cf       	rjmp	.-2      	; 0x400 <__stop_program>
